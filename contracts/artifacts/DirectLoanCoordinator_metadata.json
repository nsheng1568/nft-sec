{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_nftfiHub",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					},
					{
						"internalType": "string[]",
						"name": "_loanTypes",
						"type": "string[]"
					},
					{
						"internalType": "address[]",
						"name": "_loanContracts",
						"type": "address[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "loanType",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "loanContract",
						"type": "address"
					}
				],
				"name": "TypeUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint32",
						"name": "loanId",
						"type": "uint32"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "smartNftId",
						"type": "uint64"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "loanContract",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum IDirectLoanCoordinator.StatusType",
						"name": "newStatus",
						"type": "uint8"
					}
				],
				"name": "UpdateStatus",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_loanType",
						"type": "bytes32"
					}
				],
				"name": "getContractFromType",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_loanId",
						"type": "uint32"
					}
				],
				"name": "getLoanData",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "loanContract",
								"type": "address"
							},
							{
								"internalType": "uint64",
								"name": "smartNftId",
								"type": "uint64"
							},
							{
								"internalType": "enum IDirectLoanCoordinator.StatusType",
								"name": "status",
								"type": "uint8"
							}
						],
						"internalType": "struct IDirectLoanCoordinator.Loan",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_loanContract",
						"type": "address"
					}
				],
				"name": "getTypeFromContract",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "hub",
				"outputs": [
					{
						"internalType": "contract INftfiHub",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_promissoryNoteToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_obligationReceiptToken",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_loanId",
						"type": "uint32"
					},
					{
						"internalType": "address",
						"name": "_loanContract",
						"type": "address"
					}
				],
				"name": "isValidLoanId",
				"outputs": [
					{
						"internalType": "bool",
						"name": "validity",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_loanId",
						"type": "uint32"
					},
					{
						"internalType": "address",
						"name": "_borrower",
						"type": "address"
					}
				],
				"name": "mintObligationReceipt",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "obligationReceiptToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "promissoryNoteToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_lender",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_loanType",
						"type": "bytes32"
					}
				],
				"name": "registerLoan",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_loanType",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_loanContract",
						"type": "address"
					}
				],
				"name": "registerLoanType",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string[]",
						"name": "_loanTypes",
						"type": "string[]"
					},
					{
						"internalType": "address[]",
						"name": "_loanContracts",
						"type": "address[]"
					}
				],
				"name": "registerLoanTypes",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_loanId",
						"type": "uint32"
					}
				],
				"name": "resolveLoan",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalNumLoans",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "NFTfi",
			"events": {
				"TypeUpdated(bytes32,address)": {
					"params": {
						"loanContract": "- Address of the loan type contract.",
						"loanType": "- Loan type represented by keccak256('loan type')."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"_admin": "- Initial admin of this contract.",
						"_loanContracts": "- The addresses of each wrapper contract that implements the loan type's behaviour.",
						"_loanTypes": "- Loan types represented by keccak256('loan type').",
						"_nftfiHub": "- Address of the NftfiHub contract"
					}
				},
				"getContractFromType(bytes32)": {
					"params": {
						"_loanType": "- The loan type, e.g. bytes32(\"DIRECT_LOAN_FIXED\"), or bytes32(\"DIRECT_LOAN_PRO_RATED\")."
					}
				},
				"getLoanData(uint32)": {
					"details": "Returns loan's data for a given id.",
					"params": {
						"_loanId": "- Id of the loan"
					}
				},
				"getTypeFromContract(address)": {
					"params": {
						"_loanContract": "- The loan contract"
					}
				},
				"initialize(address,address)": {
					"details": "Sets `promissoryNoteToken` and `obligationReceiptToken`. It can be executed once by the deployer.",
					"params": {
						"_obligationReceiptToken": "- Obligaiton Recipt Token address",
						"_promissoryNoteToken": "- Promissory Note Token address"
					}
				},
				"isValidLoanId(uint32,address)": {
					"details": "checks if the given id is valid for the given loan contract address",
					"params": {
						"_loanContract": "- address og the loan contract",
						"_loanId": "- Id of the loan"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"registerLoan(address,bytes32)": {
					"details": "This is called by the LoanType beginning the new loan. It initialize the new loan data, mints both PromissoryNote and ObligationReceipt SmartNft's and returns the new loan id.",
					"params": {
						"_lender": "- Address of the lender",
						"_loanType": "- The type of the loan"
					}
				},
				"registerLoanType(string,address)": {
					"params": {
						"_loanContract": "- The address of the wrapper contract that implements the loan type's behaviour.",
						"_loanType": "- Loan type represented by 'loan type'."
					}
				},
				"registerLoanTypes(string[],address[])": {
					"params": {
						"_loanContracts": "- The addresses of each wrapper contract that implements the loan type's behaviour.",
						"_loanTypes": "- Loan types represented by 'loan type'."
					}
				},
				"resolveLoan(uint32)": {
					"details": "This is called by the LoanType who created the loan, when a loan is resolved whether by paying back or liquidating the loan. It sets the loan as `RESOLVED` and burns both PromossoryNote and ObligationReceipt SmartNft's.",
					"params": {
						"_loanId": "- Id of the loan"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"stateVariables": {
				"contractTypes": {
					"details": "reverse mapping of loanTypes - for each contract address, records the associated loan type"
				},
				"typeContracts": {
					"details": "For each loan type, records the address of the contract that implements the type"
				}
			},
			"title": "DirectLoanCoordinator",
			"version": 1
		},
		"userdoc": {
			"events": {
				"TypeUpdated(bytes32,address)": {
					"notice": "This event is fired whenever the admins register a loan type."
				}
			},
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Sets the admin of the contract. Initializes `contractTypes` with a batch of loan types. Sets `NftfiHub`."
				},
				"getContractFromType(bytes32)": {
					"notice": "This function can be called by anyone to get the contract address that implements the given loan type."
				},
				"getTypeFromContract(address)": {
					"notice": "This function can be called by anyone to get the loan type of the given contract address."
				},
				"registerLoanType(string,address)": {
					"notice": "Set or update the contract address that implements the given Loan Type. Set address(0) for a loan type for un-register such type."
				},
				"registerLoanTypes(string[],address[])": {
					"notice": "Batch set or update the contract addresses that implement the given batch Loan Type. Set address(0) for a loan type for un-register such type."
				},
				"totalNumLoans()": {
					"notice": "A continuously increasing counter that simultaneously allows every loan to have a unique ID and provides a running count of how many loans have been started by this contract."
				}
			},
			"notice": "This contract is in charge of coordinating the creation, disctubution and desctruction of the SmartNfts related to a loan, the Promossory Note and Obligaiton Receipt.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/DirectLoanCoordinator.sol": "DirectLoanCoordinator"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 100
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a",
			"license": "MIT",
			"urls": [
				"bzz-raw://cbbb1a75e4064d564bf69e74970eef35064e51fcc09cbf3589aee7faa60d6afe",
				"dweb:/ipfs/QmYfAtQwFSGmxomnyAV3tpBDbfDwiFXV61osWW2zzQVg5Q"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57",
			"license": "MIT",
			"urls": [
				"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a",
				"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh"
			]
		},
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5ea15ef7c8980240ccd46df13809d163f749bc0a01d8bced1875660d4872da1c",
				"dweb:/ipfs/QmbDfAT9VeCSG4cnPd6tjDMp8ED85dLHbWyMyv7wbmL4CH"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
			"license": "MIT",
			"urls": [
				"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
				"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
				"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
				"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
				"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634",
				"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b",
				"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz"
			]
		},
		"contracts/DirectLoanCoordinator.sol": {
			"keccak256": "0x3c3bfc1647bb26377011af2c6730d1326e1d2134b5077c392dbc878423e3062b",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://df05748b45e151ab019e68be0ebe4354b4b4950e220be02580fac4b9053008e0",
				"dweb:/ipfs/QmQ6nX695tp3CzwFujQastcWeVjETUkhXL7PWdAuPNZb5x"
			]
		},
		"contracts/SmartNft.sol": {
			"keccak256": "0x2b7d7ca6af6822032c6163153520631ce0b45ee99cef58ce8579df7ca45df271",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://42936b61ec44476c1d55908c953047578d2923990a164bfe7a55331a050bdb9a",
				"dweb:/ipfs/QmPLfCEWMJfmLJ9p1DEaoheA8AUYwv6wcxP7pE9pW5AtEe"
			]
		},
		"contracts/interfaces/IDirectLoanCoordinator.sol": {
			"keccak256": "0x339345316e124ed604da1016a8dafd30d21b1eded18febd5b7340df67515d6ac",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://a2640b96aa66dd620ad1117e4239243b1ad44fc09c02ddcbc6a009725b3a55b8",
				"dweb:/ipfs/QmZuhsxkyLKhg7NAoDTJYwt8dbQebpqiGUkrkigzmzRKdR"
			]
		},
		"contracts/interfaces/INftfiHub.sol": {
			"keccak256": "0x9c4c27933c916224e63d7944d2f928b713ca1f82993c1c95fcc33bbfba83ad74",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://abddf22b64aad3062da9a6bc3b581ef14793baa306128d2e27068e8e2eaf97b4",
				"dweb:/ipfs/QmcUMV6w6vNDu7CJSas33Ech85Pfkjxb1cowAYSMekjdf2"
			]
		},
		"contracts/utils/ContractKeys.sol": {
			"keccak256": "0x823cec7ea6116ad5f001d955d9a9e52411c48791721dd36a2f8581b95cc9629a",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://3e98e9241bcb8557a8d89f62fcba10f4afe8c88a8219c93f9791efe6d8d28c96",
				"dweb:/ipfs/QmaCJ38yHuj9E33F2hJzkLukk9o23yiVEmDq16xrMSNRUJ"
			]
		},
		"contracts/utils/Ownable.sol": {
			"keccak256": "0x1b8d373c36c6429d0cf59f2e8dc40de843ec026b06bbac985928b898dd577e95",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://d15eadcec99d6a998620138c359000bfa1a8b9be237f0ac9c171efb63dab638e",
				"dweb:/ipfs/QmS3GKw9bXChFdD2LegDq9rkx8j6wGPAAJwyCEmEFuFyD8"
			]
		}
	},
	"version": 1
}