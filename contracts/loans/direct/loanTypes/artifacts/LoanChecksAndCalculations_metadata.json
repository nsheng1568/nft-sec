{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_loanId",
						"type": "uint32"
					},
					{
						"internalType": "contract INftfiHub",
						"name": "_hub",
						"type": "INftfiHub"
					}
				],
				"name": "checkLoanIdValidity",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_interestDue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_adminFeeInBasisPoints",
						"type": "uint256"
					}
				],
				"name": "computeAdminFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_loanPrincipalAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_referralFeeInBasisPoints",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_referrer",
						"type": "address"
					}
				],
				"name": "computeReferralFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_adminFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_revenueShareInBasisPoints",
						"type": "uint256"
					}
				],
				"name": "computeRevenueShare",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_revenueSharePartner",
						"type": "address"
					},
					{
						"internalType": "contract INftfiHub",
						"name": "_hub",
						"type": "INftfiHub"
					}
				],
				"name": "getRevenueSharePercent",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_loanId",
						"type": "uint32"
					},
					{
						"internalType": "contract INftfiHub",
						"name": "_hub",
						"type": "INftfiHub"
					}
				],
				"name": "payBackChecks",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "loanPrincipalAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maximumRepaymentAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "nftCollateralId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "loanERC20Denomination",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "loanDuration",
								"type": "uint32"
							},
							{
								"internalType": "uint16",
								"name": "loanInterestRateForDurationInBasisPoints",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "loanAdminFeeInBasisPoints",
								"type": "uint16"
							},
							{
								"internalType": "address",
								"name": "nftCollateralWrapper",
								"type": "address"
							},
							{
								"internalType": "uint64",
								"name": "loanStartTime",
								"type": "uint64"
							},
							{
								"internalType": "address",
								"name": "nftCollateralContract",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "borrower",
								"type": "address"
							}
						],
						"internalType": "struct LoanData.LoanTerms",
						"name": "_loan",
						"type": "tuple"
					},
					{
						"internalType": "uint32",
						"name": "_loanId",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "_newLoanDuration",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_newMaximumRepaymentAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_lenderNonce",
						"type": "uint256"
					},
					{
						"internalType": "contract INftfiHub",
						"name": "_hub",
						"type": "INftfiHub"
					}
				],
				"name": "renegotiationChecks",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "NFTfi",
			"kind": "dev",
			"methods": {
				"computeAdminFee(uint256,uint256)": {
					"params": {
						"_adminFeeInBasisPoints": "- The percent (measured in basis points) of the interest earned that will be taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest earned.",
						"_interestDue": "- The amount of interest due, measured in the smallest quantity of the ERC20 currency being used to pay the interest."
					},
					"returns": {
						"_0": "The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that is due as an admin fee."
					}
				},
				"computeReferralFee(uint256,uint256,address)": {
					"params": {
						"_loanPrincipalAmount": "- The original sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units.",
						"_referralFeeInBasisPoints": "- The percent (measured in basis points) of the loan principal amount that will be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.",
						"_referrer": "- The address of the referrer who found the lender matching the listing, Zero address to signal that there is no referrer."
					},
					"returns": {
						"_0": "The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that should be sent to the referrer."
					}
				},
				"computeRevenueShare(uint256,uint256)": {
					"params": {
						"_adminFee": "- The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that is due as an admin fee.",
						"_revenueShareInBasisPoints": "- The percent (measured in basis points) of the admin fee amount that will be taken as a revenue share for a the partner, at the moment the loan is begun."
					},
					"returns": {
						"_0": "The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that should be sent to the `revenueSharePartner`."
					}
				},
				"getRevenueSharePercent(address,INftfiHub)": {
					"details": "Function that the partner is permitted and returns its shared percent.",
					"params": {
						"_revenueSharePartner": "- Partner's address"
					},
					"returns": {
						"_0": "The revenue share percent for the partner."
					}
				},
				"payBackChecks(uint32,INftfiHub)": {
					"details": "Function that performs some validation checks before trying to repay a loan",
					"params": {
						"_loanId": "- The id of the loan being repaid"
					}
				},
				"renegotiationChecks(LoanData.LoanTerms,uint32,uint32,uint256,uint256,INftfiHub)": {
					"details": "Performs some validation checks before trying to renegotiate a loan. Needed to avoid stack too deep.",
					"params": {
						"_lenderNonce": "- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun() , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce.",
						"_loan": "- The main Loan Terms struct.",
						"_loanId": "- The unique identifier for the loan to be renegotiated",
						"_newLoanDuration": "- The new amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT.",
						"_newMaximumRepaymentAmount": "- The new maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early."
					},
					"returns": {
						"_0": "Borrower and Lender addresses"
					}
				}
			},
			"title": "LoanChecksAndCalculations",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"computeAdminFee(uint256,uint256)": {
					"notice": "A convenience function computing the adminFee taken from a specified quantity of interest."
				},
				"computeReferralFee(uint256,uint256,address)": {
					"notice": "A convenience function computing the referral fee taken from the loan principal amount to transferr to the referrer."
				},
				"computeRevenueShare(uint256,uint256)": {
					"notice": "A convenience function computing the revenue share taken from the admin fee to transferr to the permitted partner."
				}
			},
			"notice": "Helper library for LoanBase",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/loans/direct/loanTypes/LoanChecksAndCalculations.sol": "LoanChecksAndCalculations"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 100
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
			"license": "MIT",
			"urls": [
				"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
				"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"contracts/interfaces/IDirectLoanCoordinator.sol": {
			"keccak256": "0x339345316e124ed604da1016a8dafd30d21b1eded18febd5b7340df67515d6ac",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://a2640b96aa66dd620ad1117e4239243b1ad44fc09c02ddcbc6a009725b3a55b8",
				"dweb:/ipfs/QmZuhsxkyLKhg7NAoDTJYwt8dbQebpqiGUkrkigzmzRKdR"
			]
		},
		"contracts/interfaces/INftfiHub.sol": {
			"keccak256": "0x9c4c27933c916224e63d7944d2f928b713ca1f82993c1c95fcc33bbfba83ad74",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://abddf22b64aad3062da9a6bc3b581ef14793baa306128d2e27068e8e2eaf97b4",
				"dweb:/ipfs/QmcUMV6w6vNDu7CJSas33Ech85Pfkjxb1cowAYSMekjdf2"
			]
		},
		"contracts/interfaces/IPermittedERC20s.sol": {
			"keccak256": "0xef2644814ed4d4f33429af34879dc3d533142194bce601969e8f95e39c8d868e",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://165e1398e3683589fc4fc0cd366c8d122cda22ceef8749623c6551f9ac74112a",
				"dweb:/ipfs/QmaaAJhBffjwdGgTgHhAHDBbBWi9xHJZhoj9hS6LVWuPA2"
			]
		},
		"contracts/interfaces/IPermittedPartners.sol": {
			"keccak256": "0xc719dbcd40671582855db3282f96666fe908e73cf68c75c5fe1d28925053c53a",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://d0b14257805f4688d44e6e88d65639698c7539f17cd69da88d991416f3c37850",
				"dweb:/ipfs/QmRZpqfBNVXtUMUV8WW4CTGVRp3u8ugRhe9X3YBNCKHsER"
			]
		},
		"contracts/loans/direct/loanTypes/IDirectLoanBase.sol": {
			"keccak256": "0x3501b4d79b43f7e228db49d93ab6932cd6f56ce6463990adfceb0acac776ca5a",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://f4d99dc7eaf58fb380df68e419760a58f088d702c2aa912a8634a6c1be45069a",
				"dweb:/ipfs/QmNvgLXfxDZ81mhGDHTnSYzhPveKzNaVJFypggAvntSFX8"
			]
		},
		"contracts/loans/direct/loanTypes/LoanChecksAndCalculations.sol": {
			"keccak256": "0xd93b06d4ee9ee1f3e0266373bb09b27cc94ad175ce69efd5e0d8c39cc430c82e",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://dc2cfcbb5b1dd7629487b9bc3b5da5ceb8078813ea0443fbc13b9462f88ce4bd",
				"dweb:/ipfs/QmSs139nZznjatwzL9KrwTMJX5P7MBt8MPcpTA6MgtkApB"
			]
		},
		"contracts/loans/direct/loanTypes/LoanData.sol": {
			"keccak256": "0x68e0a45abaafeb9bdbf235ea1b045927cfc2750111c08cdc2e273bcb19e1551c",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://c563378388b5bbaacc7c18c33578c5bfd91043ffdcb4e7d7954a6188425ca109",
				"dweb:/ipfs/QmWs3w56gKPRUsJ9jXqwaX7SaMhs6Hd4YZyxMtQwsk4J3C"
			]
		},
		"contracts/utils/ContractKeys.sol": {
			"keccak256": "0x823cec7ea6116ad5f001d955d9a9e52411c48791721dd36a2f8581b95cc9629a",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://3e98e9241bcb8557a8d89f62fcba10f4afe8c88a8219c93f9791efe6d8d28c96",
				"dweb:/ipfs/QmaCJ38yHuj9E33F2hJzkLukk9o23yiVEmDq16xrMSNRUJ"
			]
		}
	},
	"version": 1
}